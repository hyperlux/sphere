name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  DOCKER_IMAGE: lightvibrations/auronet
  DOCKER_TAG: latest

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npx tsc --noEmit

      - name: Lint check
        run: npm run lint
        # Fail deployment on lint errors in production
        
      - name: Run tests
        run: npm test
        # Fail deployment on test failures in production

      - name: Build verification
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  deploy:
    name: Deploy to Production
    needs: test  # Only deploy if tests pass
    runs-on: ubuntu-latest
    environment: production  # Additional protection for production deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-to: type=inline

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/auronet
            
            # Update docker-compose.yml with new environment variables but keep existing structure
            cat > docker-compose.yml <<EOL
            version: '3.9'

            services:
              traefik:
                image: traefik:v2.10
                container_name: traefik
                restart: unless-stopped
                security_opt:
                  - no-new-privileges:true
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - "/var/run/docker.sock:/var/run/docker.sock:ro"
                  - "./traefik/certs:/certs"
                  - "./traefik/traefik.yml:/traefik.yml:ro"
                networks:
                  - web

              auronet-prod:
                image: ${DOCKER_IMAGE}:${DOCKER_TAG}
                container_name: auronet-prod
                restart: unless-stopped
                environment:
                  - DATABASE_URL=${{ secrets.DATABASE_URL }}
                  - NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
                  - NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
                  - SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
                  - NODE_ENV=production
                expose:
                  - "3000"
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
                  interval: 10s
                  timeout: 10s
                  retries: 3
                  start_period: 30s
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=web"
                  - "traefik.http.routers.prod.rule=Host(\`auroville.social\`)"
                  - "traefik.http.routers.prod.entrypoints=web"
                  - "traefik.http.services.auronet-prod.loadbalancer.server.port=3000"
                  - "traefik.http.routers.prod.service=auronet-prod"
                  - "traefik.http.routers.prod-secure.rule=Host(\`auroville.social\`)"
                  - "traefik.http.routers.prod-secure.entrypoints=websecure"
                  - "traefik.http.routers.prod-secure.tls=true"
                  - "traefik.http.routers.prod-secure.tls.certresolver=default"
                  - "traefik.http.routers.prod-secure.service=auronet-prod"
                  - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"
                  - "traefik.http.routers.prod.middlewares=redirect-https"
                networks:
                  - web

            networks:
              web:
                name: web
                external: true
            EOL

            # Ensure directory for Traefik configuration exists
            mkdir -p traefik/certs
            
            # Create or update Traefik configuration if it doesn't exist
            if [ ! -f traefik/traefik.yml ]; then
              cat > traefik/traefik.yml <<EOL
              entryPoints:
                web:
                  address: ":80"
                websecure:
                  address: ":443"
                  http:
                    tls:
                      certResolver: default
                      domains:
                        - main: "auroville.social"
                        - main: "staging.auroville.social"

              certificatesResolvers:
                default:
                  acme:
                    email: "notifications@aurovillenetwork.us"
                    storage: "/certs/acme.json"
                    tlsChallenge: {}

              providers:
                docker:
                  endpoint: "unix:///var/run/docker.sock"
                  exposedByDefault: false
                  network: web

              api:
                dashboard: false

              log:
                level: INFO
              EOL
            fi

            # Make sure acme.json exists with correct permissions
            touch traefik/certs/acme.json
            chmod 600 traefik/certs/acme.json

            # Deploy using the new compose file
            docker compose pull
            docker compose up -d --force-recreate

            # Wait for containers to start
            sleep 10

            # Check container status and logs
            echo "Container Status:"
            docker ps -a
            echo "Container Logs:"
            docker logs auronet-prod --tail 50
            echo "Traefik Logs:"
            docker logs traefik --tail 50
            
            # Check if services are properly connected
            echo "Traefik Docker Provider Info:"
            docker logs traefik 2>&1 | grep -A 5 "Provider connection established"
