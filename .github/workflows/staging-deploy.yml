name: Deploy to Staging

on:
  push:
    branches:
      - develop  # or whichever branch you use for staging

env:
  DOCKER_IMAGE: lightvibrations/auronet
  DOCKER_TAG: develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-to: type=inline

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/auronet
            
            # Create docker-compose file with proper environment variables
            cat > docker-compose.staging.yml <<EOL
            version: '3.9'
            services:
              auronet-staging:
                image: ${DOCKER_IMAGE}:${DOCKER_TAG}
                container_name: auronet-staging
                restart: unless-stopped
                environment:
                  - DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
                  - NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}
                  - NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}
                  - SUPABASE_SERVICE_ROLE_KEY=${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 90s
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.staging-secure.rule=Host(\`staging.auroville.social\`)"
                  - "traefik.http.routers.staging-secure.entrypoints=websecure"
                  - "traefik.http.routers.staging-secure.tls=true"
                  - "traefik.http.routers.staging-secure.tls.certresolver=default"
                  - "traefik.http.routers.staging.rule=Host(\`staging.auroville.social\`)"
                  - "traefik.http.routers.staging.entrypoints=web"
                  - "traefik.http.routers.staging.middlewares=redirect-to-https"
                  - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
                  - "traefik.http.services.staging.loadbalancer.server.port=3000"
                  - "traefik.http.services.staging.loadbalancer.healthcheck.path=/api/health"
                  - "traefik.http.services.staging.loadbalancer.healthcheck.interval=30s"
                  - "traefik.http.services.staging.loadbalancer.healthcheck.timeout=10s"
                networks:
                  - web
            networks:
              web:
                external: true
            EOL

            # Ensure web network exists
            docker network inspect web >/dev/null 2>&1 || docker network create web
            
            # Deploy using the new compose file
            docker compose -f docker-compose.staging.yml pull
            docker compose -f docker-compose.staging.yml up -d --force-recreate

            # Print container status
            docker compose -f docker-compose.staging.yml ps
